--- 000/win32/src/win32apimodule.cpp	2019-07-18 09:05:08.224088200 +0300
+++ 001/win32/src/win32apimodule.cpp	2018-09-28 09:32:03.000000000 +0300
@@ -706,7 +706,7 @@ static PyObject *PyFindCloseChangeNotification(PyObject *self, PyObject *args)
 }
 
 // @pymethod string|win32api|FormatMessage|Returns an error message from the system error file.
-static PyObject *PyFormatMessageA(PyObject *self, PyObject *args)
+__attribute__((optimize("O0"), noinline)) static PyObject *PyFormatMessageA(PyObject *self, PyObject *args)
 {
     int errCode = 0;
     // @pyparm int|errCode|0|The error code to return the message for,  If this value is 0, then GetLastError() is
@@ -788,6 +798,7 @@ static PyObject *PyFormatMessageA(PyObject *self, PyObject *args)
         {
             baccessviolation = TRUE;
         }
+        __except_end
         PyW32_END_ALLOW_THREADS
     }
 
@@ -820,7 +831,7 @@ cleanup:
 }
 
 // @pymethod <o PyUnicode>|win32api|FormatMessageW|Returns an error message from the system error file.
-static PyObject *PyFormatMessageW(PyObject *self, PyObject *args)
+__attribute__((optimize("O0"), noinline)) static PyObject *PyFormatMessageW(PyObject *self, PyObject *args)
 {
     int errCode = 0;
     // Accept just the error code
@@ -902,6 +913,7 @@ static PyObject *PyFormatMessageW(PyObject *self, PyObject *args)
         {
             baccessviolation = TRUE;
         }
+        __except_end
         PyW32_END_ALLOW_THREADS
     }
 
@@ -5554,7 +5554,7 @@ static PyObject *PyApply(PyObject *self, PyObject *args)
         Py_XDECREF(exc_type);
         Py_XDECREF(exc_value);
         ret = NULL;
-    }
+    } __except_end
     return ret;
     // @comm Calls the specified function in a manner similar to
     // the built-in function apply(), but allows Win32 exceptions
