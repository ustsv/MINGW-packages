diff -aur 000/win32/src/win32crypt/PyCRYPTPROV.cpp 001/win32/src/win32crypt/PyCRYPTPROV.cpp
--- 000/win32/src/win32crypt/PyCRYPTPROV.cpp	2015-04-09 21:00:49.100277500 -0300
+++ 001/win32/src/win32crypt/PyCRYPTPROV.cpp	2015-04-09 21:02:02.381651500 -0300
@@ -351,7 +352,7 @@
     // initialize buffer with char string if passed if
     ZeroMemory(pbBuffer, dwLen + 1);
     if (seeddata != NULL)
-        memcpy(pbBuffer, seeddata, min(dwLen, seedlen));
+        memcpy(pbBuffer, seeddata, __min(dwLen, seedlen));
     if (CryptGenRandom(hcryptprov, dwLen, pbBuffer))
         ret = PyString_FromStringAndSize((char *)pbBuffer, dwLen);
     else
diff -aur 000/win32/src/PySECURITY_DESCRIPTOR.cpp 001/win32/src/PySECURITY_DESCRIPTOR.cpp
--- 000/win32/src/PySECURITY_DESCRIPTOR.cpp	2015-04-09 21:00:48.819029400 -0300
+++ 001/win32/src/PySECURITY_DESCRIPTOR.cpp	2015-04-09 21:01:55.881645000 -0300
@@ -786,7 +787,7 @@
 {
     ob_type = &PySECURITY_DESCRIPTORType;
     _Py_NewReference(this);
-    cb = max(cb, SECURITY_DESCRIPTOR_MIN_LENGTH);
+    cb = __max(cb, SECURITY_DESCRIPTOR_MIN_LENGTH);
     PSECURITY_DESCRIPTOR psd = malloc(cb);
     this->m_psd=NULL;
     if (::InitializeSecurityDescriptor(psd, SECURITY_DESCRIPTOR_REVISION))
diff -aur 000/win32/src/win32gui.i 001/win32/src/win32gui.i
--- 000/win32/src/win32gui.i	2019-07-26 15:14:57.295569500 +0300
+++ 001/win32/src/win32gui.i	2019-07-26 15:15:11.562304200 +0300
@@ -3802,7 +3802,7 @@
     nicons_got = 1;
 #endif
     // Asking for 1 always says it got 2!?
-    nicons = min(nicons, nicons_got);
+    nicons = __min(nicons, nicons_got);
     objects_large = PyList_New(nicons);
     if (!objects_large) goto done;
     objects_small = PyList_New(nicons);
@@ -6370,7 +6370,7 @@
 	// lpstrFile buffer receives full path and possibly multiple file names, allocate extra space
 	if (!PyWinObject_AsWCHAR(obFile, &initfile, TRUE, &initfilechars))
 		goto done;
-	pofn->nMaxFile=max(pofn->nMaxFile, initfilechars+1);
+	pofn->nMaxFile=__max(pofn->nMaxFile, initfilechars+1);
 	bufsize=pofn->nMaxFile*sizeof(WCHAR);
 	pofn->lpstrFile=(LPWSTR)malloc(bufsize);
 	if (pofn->lpstrFile==NULL){
diff -aur 000/win32/src/win32inet.i 001/win32/src/win32inet.i
--- 000/win32/src/win32inet.i	2015-04-09 21:00:49.569028200 -0300
+++ 001/win32/src/win32inet.i	2015-04-09 21:02:02.428526500 -0300
@@ -1851,7 +1851,7 @@
 			}
 		}
 	if (bsuccess && GroupName)
-		_tcsncpy(GroupInfo->szGroupName, GroupName, min(namelen, GROUPNAME_MAX_LENGTH));
+		_tcsncpy(GroupInfo->szGroupName, GroupName, __min(namelen, GROUPNAME_MAX_LENGTH));
 	Py_DECREF(dummy_tuple);
 	PyWinObject_FreeTCHAR(GroupName);
 	if (OwnerStorage)
diff -aur 000/win32/src/win32pdhmodule.cpp 001/win32/src/win32pdhmodule.cpp
--- 000/win32/src/win32pdhmodule.cpp	2015-04-09 21:00:49.662779100 -0300
+++ 001/win32/src/win32pdhmodule.cpp	2015-04-09 21:02:02.444150800 -0300
@@ -1082,7 +1083,7 @@
     // Initialize the return buffer if starting path is passed in. (bInitializePath will also be set)
     if (!PyWinObject_AsTCHAR(obInitialPath, &InitialPath, TRUE, &cchInitialPath))
         return NULL;  // Last exit without cleanup
-    myCfg.cfg.cchReturnPathLength = max(cchInitialPath + 1, 1024);
+    myCfg.cfg.cchReturnPathLength = __max(cchInitialPath + 1, 1024);
     myCfg.cfg.szReturnPathBuffer = (TCHAR *)malloc(myCfg.cfg.cchReturnPathLength * sizeof(TCHAR));
     if (myCfg.cfg.szReturnPathBuffer == NULL) {
         PyErr_NoMemory();
diff -aur 000/win32/src/win32trace.cpp 001/win32/src/win32trace.cpp
--- 000/win32/src/win32trace.cpp	2015-04-09 21:00:50.022154900 -0300
+++ 001/win32/src/win32trace.cpp	2015-04-09 21:02:02.475400700 -0300
@@ -315,7 +315,7 @@
     BOOL rc = TRUE;
     Py_BEGIN_ALLOW_THREADS const char *data_this = data;
     while (len) {
-        unsigned len_this = min(len, BUFFER_SIZE / 2);
+        unsigned len_this = __min(len, BUFFER_SIZE / 2);
         BOOL ok = GetMyMutex();
         if (ok) {
             // must use types with identical size on win32 and win64
--- 000/com/win32com/src/PyGatewayBase.cpp	2019-07-26 01:25:33.000000000 +0300
+++ 001/com/win32com/src/PyGatewayBase.cpp	2019-07-27 11:50:36.216356200 +0300
@@ -382,7 +382,7 @@
         // make sure its not a special DISPID we don't understand.
         if (params->rgdispidNamedArgs[i] < 0)
             return DISP_E_PARAMNOTFOUND;
-        numArgs = max(numArgs, (UINT)params->rgdispidNamedArgs[i] + 1);
+        numArgs = __max(numArgs, (UINT)params->rgdispidNamedArgs[i] + 1);
     }
 
     PyObject *argList = PyTuple_New(numArgs);
@@ -597,7 +597,7 @@
             ob = NULL;
             firstByRef = 1;
         }
-        UINT max_args = min(cUserResult - firstByRef, pDispParams->cArgs);
+        UINT max_args = __min(cUserResult - firstByRef, pDispParams->cArgs);
         UINT *offsets = (UINT *)_malloca(sizeof(UINT) * max_args);
         // Get the offsets into our params of all BYREF args, in order.
         fill_byref_offsets(pDispParams, offsets, max_args);
--- 000/com/win32comext/axcontrol/src/PyIOleCommandTarget.cpp	2019-07-26 01:25:33.000000000 +0300
+++ 001/com/win32comext/axcontrol/src/PyIOleCommandTarget.cpp	2019-07-27 12:24:16.667134100 +0300
@@ -205,7 +205,7 @@
             ok = PyWinObject_AsAutoFreeBstr(obText, &tempString);
             if (ok) {
                 UINT strLen = SysStringLen(tempString);
-                UINT nwrite = min(strLen, pCmdText->cwBuf);
+                UINT nwrite = __min(strLen, pCmdText->cwBuf);
                 wcsncpy(pCmdText->rgwz, (WCHAR *)(BSTR)tempString, nwrite);
                 pCmdText->cwActual = nwrite;
             }
diff -aur 000/win32/src/odbc.cpp 001/win32/src/odbc.cpp
--- 000/win32/src/odbc.cpp	2015-04-09 21:00:49.053401800 -0300
+++ 001/win32/src/odbc.cpp	2015-04-09 21:02:02.366025800 -0300
@@ -958,21 +958,21 @@
         case SQL_DATE:
         case SQL_TIMESTAMP:
         case SQL_BIT:
-            return (max(collen, (int)_tcslen(colname)));
+            return (__max(collen, (int)_tcslen(colname)));
         case SQL_SMALLINT:
         case SQL_INTEGER:
         case SQL_TINYINT:
-            return (max(collen + 1, (int)_tcslen(colname)));
+            return (__max(collen + 1, (int)_tcslen(colname)));
         case SQL_DECIMAL:
         case SQL_NUMERIC:
-            return (max(collen + 2, (int)_tcslen(colname)));
+            return (__max(collen + 2, (int)_tcslen(colname)));
         case SQL_REAL:
         case SQL_FLOAT:
         case SQL_DOUBLE:
-            return (max(20, (int)_tcslen(colname)));
+            return (__max(20, (int)_tcslen(colname)));
         case SQL_BINARY:
         case SQL_VARBINARY:
-            return (max(2 * collen, (int)_tcslen(colname)));
+            return (__max(2 * collen, (int)_tcslen(colname)));
         case SQL_LONGVARBINARY:
         case SQL_LONGVARCHAR:
         default:
--- 000/com/win32comext/internet/src/PyIInternetProtocol.cpp	2019-07-26 01:25:33.000000000 +0300
+++ 001/com/win32comext/internet/src/PyIInternetProtocol.cpp	2019-07-27 15:30:10.810253700 +0300
@@ -178,7 +178,7 @@
     }
     else {
         char *buf = PyString_AsString(result);
-        *pcbRead = min(cb, (ULONG)PyString_Size(result));
+        *pcbRead = __min(cb, (ULONG)PyString_Size(result));
         memcpy(pv, buf, *pcbRead);
     }
     return hr;
--- 000/com/win32comext/internet/src/PyIInternetProtocolInfo.cpp	2019-07-26 01:25:33.000000000 +0300
+++ 001/com/win32comext/internet/src/PyIInternetProtocolInfo.cpp	2019-07-27 15:31:50.481163500 +0300
@@ -233,7 +233,7 @@
     if (!bPythonIsHappy)
         return PyCom_HandlePythonFailureToCOM(/*pexcepinfo*/);
     ++(*pcchResult);  // Null terminator
-    *pcchResult = min(*pcchResult, cchResult);
+    *pcchResult = __min(*pcchResult, cchResult);
     memcpy(pwzResult, bstrTemp, *pcchResult * sizeof(WCHAR));
     SysFreeString(bstrTemp);
     Py_DECREF(result);
@@ -269,7 +269,7 @@
     if (!bPythonIsHappy)
         hr = PyCom_HandlePythonFailureToCOM(/*pexcepinfo*/);
     ++(*pcchResult);  // Null terminator
-    *pcchResult = min(*pcchResult, cchResult);
+    *pcchResult = __min(*pcchResult, cchResult);
     memcpy(pwzResult, bstrTemp, *pcchResult * sizeof(WCHAR));
     SysFreeString(bstrTemp);
     Py_DECREF(result);
@@ -332,7 +332,7 @@
         }
     }
     else {
-        *pcbBuf = min(cbBuffer, (ULONG)PyString_Size(result));
+        *pcbBuf = __min(cbBuffer, (ULONG)PyString_Size(result));
         memcpy(pBuffer, PyString_AsString(result), *pcbBuf);
     }
     Py_DECREF(result);
--- 000/com/win32comext/internet/src/PyIInternetSecurityManager.cpp	2019-07-26 01:25:33.000000000 +0300
+++ 001/com/win32comext/internet/src/PyIInternetSecurityManager.cpp	2019-07-27 15:33:21.876845300 +0300
@@ -336,7 +336,7 @@
         Py_DECREF(result);
         return MAKE_PYCOM_GATEWAY_FAILURE_CODE("GetSecurityId");
     }
-    *pcbSecurityId = min(buf_len, *pcbSecurityId);
+    *pcbSecurityId = __min(buf_len, *pcbSecurityId);
     memcpy(pbSecurityId, buf, *pcbSecurityId);
     Py_DECREF(result);
     return hr;
